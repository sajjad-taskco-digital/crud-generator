<?php

namespace TaskcoDigital\CrudGenerator\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\File;

class MakeCrudCommand extends Command
{
    protected $signature = 'make:crud {name} {--model=} {--force}';
    protected $description = 'Generate API CRUD operations with all necessary files';

    public function handle()
    {
        $name = $this->argument('name');
        $modelName = $this->option('model') ?: $name;

        $this->info("🚀 Generating CRUD for: {$name}");
        $this->info("📦 Model: {$modelName}");

        try {
            // Centralized file generation
            $this->generateMigration($name);
            $this->generateFile('model', app_path("Models/{$modelName}.php"), [
                '{{ class }}' => Str::studly($modelName),
                '{{ table }}' => Str::snake(Str::plural($modelName)),
            ]);

            $this->generateFile('controller', app_path("Http/Controllers/Api/".Str::studly($name)."Controller.php"), [
                '{{ class }}'    => Str::studly($name).'Controller',
                '{{ model }}'    => Str::studly($modelName),
                '{{ service }}'  => Str::studly($name).'Service',
                '{{ request }}'  => Str::studly($name).'Request',
                '{{ variable }}' => Str::camel($name),
                '{{ resource }}' => Str::plural(Str::lower($name)),
            ]);

            $this->generateFile('service', app_path("Services/".Str::studly($name)."Service.php"), [
                '{{ class }}'    => Str::studly($name).'Service',
                '{{ model }}'    => Str::studly($modelName),
                '{{ variable }}' => Str::camel($name),
            ]);

            $this->generateFile('request', app_path("Http/Requests/".Str::studly($name)."Request.php"), [
                '{{ class }}' => Str::studly($name).'Request',
            ]);

            $this->generateFile('seeder', database_path("seeders/".Str::studly($name)."Seeder.php"), [
                '{{ class }}' => Str::studly($name).'Seeder',
                '{{ model }}' => Str::studly($name),
            ]);


            $this->generateRoutes($name);

            $this->successMessage($name);
        } catch (\Exception $e) {
            $this->error("❌ Error generating CRUD: " . $e->getMessage());
            return 1;
        }

        return 0;
    }

    /**
     * Generic generator for stubs
     */
    protected function generateFile(string $stubType, string $path, array $replacements)
    {
        $stub = $this->getStub($stubType);
        $content = str_replace(array_keys($replacements), array_values($replacements), $stub);

        $this->ensureDirectoryExists(dirname($path));

        File::put($path, $content);
        $this->info("📄 {$stubType} created: {$path}");
    }

    protected function generateMigration($name)
    {
        $tableName = Str::snake(Str::plural($name));
        $className = 'Create' . Str::studly(Str::plural($name)) . 'Table';
        $timestamp = date('Y_m_d_His');
        $filename = "{$timestamp}_create_{$tableName}_table.php";

        $this->generateFile('migration', "database/migrations/{$filename}", [
            '{{ class }}' => $className,
            '{{ table }}' => $tableName,
        ]);
    }

    protected function generateRoutes($name)
    {
        $routeName = Str::kebab(Str::plural($name));
        $controllerName = Str::studly($name) . 'Controller';

        $routes = "\n// {$name} CRUD Routes - Generated by TaskcoDigital CRUD Generator\n";
        $routes .= "Route::apiResource('{$routeName}', App\\Http\\Controllers\\Api\\{$controllerName}::class);\n";

        $apiRoutesPath = base_path('routes/api.php');

        if (!File::exists($apiRoutesPath)) {
            $this->warn("⚠️ routes/api.php not found. Running 'php artisan install:api'...");
            $this->call('install:api');
        }

        if (File::exists($apiRoutesPath)) {
            $currentRoutes = File::get($apiRoutesPath);
            if (!str_contains($currentRoutes, "apiResource('{$routeName}'")) {
                File::append($apiRoutesPath, $routes);
                $this->info("📄 Routes added to api.php");
            } else {
                $this->warn("⚠️ Route for '{$routeName}' already exists.");
            }
        } else {
            $this->error("❌ routes/api.php still not found. Please create it manually.");
        }
    }

    protected function getStub($type)
    {
        $stubPath = base_path("stubs/crud-generator/{$type}.stub");
        if (File::exists($stubPath)) return File::get($stubPath);

        $packageStubPath = __DIR__ . "/../../stubs/{$type}.stub";
        if (File::exists($packageStubPath)) return File::get($packageStubPath);

        return $this->getDefaultStub($type);
    }

    protected function ensureDirectoryExists($directory)
    {
        if (!File::exists($directory)) {
            File::makeDirectory($directory, 0755, true);
        }
    }

    protected function successMessage($name)
    {
        $routeName = Str::kebab(Str::plural($name));

        $this->info('');
        $this->info('✅ CRUD generation completed successfully!');
        $this->info('');
        $this->info('📝 Next steps:');
        $this->info('   1. Run: php artisan migrate');
        $this->info('   2. Optionally run: php artisan db:seed --class=' . Str::studly($name) . 'Seeder');
        $this->info('');
        $this->info('🎯 API Endpoints available at:');
        $this->info("   GET    /api/{$routeName}");
        $this->info("   POST   /api/{$routeName}");
        $this->info("   GET    /api/{$routeName}/{id}");
        $this->info("   PUT    /api/{$routeName}/{id}");
        $this->info("   DELETE /api/{$routeName}/{id}");
    }
}
